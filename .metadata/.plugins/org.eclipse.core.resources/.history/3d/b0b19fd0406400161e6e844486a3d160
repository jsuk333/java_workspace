/*구현할 인터페이스가 3개 이상의 재정의 메서드를 보유할 경우
 * 사용하지도 않는 메서드를 코드상으로 존재 시켜야 하는 불합리하난 경우가
 * 발생하게 된다. 썬에서는 아답터라는 클래스로 이것을 해결해 준다.*/
package com.sds.game;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;

public class GameWindow extends JFrame implements ActionListener{
	GamePanel gamepanel;
	JMenuBar bar;
	JMenu[] menu=new JMenu[2];
	JMenuItem[] item=new JMenuItem[3];
	String[] itemTitle={"게임시작","일시중지","게임종료"};
	KeyAdapter keyAdapter;//우리 대신 키리스너를 구현한 추상 클래스
	//keyrealesed, keytyped , keypressed 를 재정의 할 의무가 없다.
	public GameWindow() {
				
		gamepanel=new GamePanel();
		
		add(gamepanel);
		pack();
		
		//메뉴구성
		bar=new JMenuBar();
		menu[0]=new JMenu("게임옵션");
		menu[1]=new JMenu("게임옵션");
		
		for(int i=0;i<item.length;i++){
			item[i]=new JMenuItem(itemTitle[i]);
			menu[0].add(item[i]);
			item[i].addActionListener(this);
		}
		bar.add(menu[0]);
		bar.add(menu[1]);
		
		setJMenuBar(bar);
		
		//윈도우와 키리스너 연결
		this.addKeyListener(keyAdapter=new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				System.out.println("키 눌렀어??");
			}
		});
		setLocationRelativeTo(null);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setVisible(true);
		setBackground(Color.black);
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		Object obj=e.getSource();
		if(obj==item[0]){//게임 시작
			gamepanel.startGame();
		}else if(obj==item[1]){//일시 종료
			gamepanel.pauseGame();
		}else if(obj.equals(item[2])){//프로그램 종료
			gamepanel.exitGame();
		}
	}
		
	

}
